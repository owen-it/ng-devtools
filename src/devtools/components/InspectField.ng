<template>
    <div class="data-field">
        <div class="self" 
             ng:click="$ctrl.toggle()">
             <span class="arrow right"
                   ng:class="{ rotated: $ctrl.expanded }"
                   ng:show="$ctrl.isExpandableType()">
            </span>
            <span class="key">{{ $ctrl.field.key }}</span>
            <span class="colon">:<div class="meta" ng:if="$ctrl.field.meta">
                <div class="meta-field" ng:repeat="(val, key) in $ctrl.field.meta">
                    <span class="key">{{ key }}</span>
                    <span class="value">{{ val }}</span>
                </div>
            </div></span>
            <span class="value" ng:class="[$ctrl.valueType()]">{{ $ctrl.formattedValue() }}</span>
        </div>
        <div class="children" ng:if="$ctrl.expanded && $ctrl.isExpandableType()">
            
            <span 
                class="more" ng:click="$ctrl.expand(10)" title="Expand"
                ng:if="$ctrl.formattedSubFields.length > $ctrl.limit">
                ...
                <!-- 
                    This span should stay here for now, 
                    they are being removed from the gift
                     when placed below the component 
                -->
            </span>
            <inspect-field
                ng:repeat="subField in $ctrl.limitedSubFields track by subField.key"
                field="subField"
                depth="$ctrl.depth + 1">
            <inspect-field>
        </div>
    </div>
</template>

<script>
    import { UNDEFINED, INFINITY, isPlainObject } from 'src/util'

    const rawTypeRE = /^\[object (\w+)\]$/

    export default {
        bindings: {
            field: '=',
            depth: '='
        },
        controller: class DataFieldCtrl 
        {
            constructor ($scope)
            {
                this.$inject = ['$scope']

                $scope.$watch('$ctrl.field', () => {
                    this._updateSubFields()
                })
            }

            $onInit () 
            {
                this.field = this.field
                this.limit = Array.isArray(this.field.value) ? 10 : Infinity
                this.expanded = this.depth === 0
                
                this._updateSubFields()
            }

            _updateSubFields ()
            {
                if (this.isExpandableType()) {
                    this.limitedSubFields = this._limitedSubFields()
                    this.formattedSubFields = this._formattedSubFields()
                }
            }

            expand (depth) 
            {
                this.limit += depth

                this._updateSubFields()
            }

            formattedValue() 
            {
                const value = this.field.value
                
                if (value == null) {
                    return null
                } else if (value === UNDEFINED) {
                    return 'undefiend'
                } else if (value === INFINITY) {
                    return 'Infinity'
                } else if (Array.isArray(value)) {
                    return 'Array[' + value.length + ']'
                } else if (isPlainObject(value)) {
                    return 'Object' + (Object.keys(value).length ? '' : '(empty)')
                } else if (typeof value === 'string') {
                    var typeMatch = value.match(rawTypeRE)
                    if (typeMatch) {
                        return typeMatch[1]
                    } else {
                        return JSON.stringify(value)
                    }
                } else if (value instanceof RegExp) {
                    return value.toString()
                } else {
                    return value
                }
            }

            isExpandableType ()
            {
                const value = this.field.value
                return Array.isArray(value) || isPlainObject(value)
            }

            _formattedSubFields ()
            {
                let value = this.field.value 
                if (Array.isArray(value)) {
                    value = value.map((item, i) => ({
                        key: i, value: item
                    }))
                } else if (typeof value === 'object') {
                    value = Object.keys(value).map(key => ({
                        key, value: value[key]
                    }))
                    value = value.slice().sort((a, b) => a.key > b.key)
                }

                return value
            }

            _limitedSubFields () 
            {
                return this._formattedSubFields().slice(0, this.limit)
            }

            valueType () 
            {
                const value = this.field.value
                const type = typeof value

                if (value == null || value === UNDEFINED) {
                    return 'null'
                } else if (type === 'boolean' || type === 'number' || value === 'INFINITY') {
                    return 'literal'
                } else if (
                    value instanceof RegExp ||
                    (type === 'string' && !rawTypeRE.test(value)) 
                ) {
                    return 'string'
                }
            }

            toggle ()
            {
                if(this.isExpandableType()) {
                    this.expanded = !this.expanded
                }
            }
        }
    }
</script>

<style lang="stylus" scoped>
    @import '../common'

    .data-field
        user-select text
        font-size 12px
        font-family Menlo, Consolas, monospace
        cursor default

    .children
        position relative
        margin-left 15px

    .self 
        height 20px
        line-height 20px
        position relative
        white-space nowrap
        padding-left 14px
        span, div
            display inline-block
            vertical-align middle
        .arrow
            position absolute
            top 7px
            left 0px
            &.rotated
                transform rotate(90deg)
        .key 
            color #881391
        .colon
            margin-right .5em
            position relative
        .value 
            color #444
            &.string
                color #c41a16
            &.null
                color #999
            &.literal
                color #0033cc

        .type
            color $background-color
            padding 3px 6px

    .more 
        cursor pointer
        display inline-block
        border-radius 4px
        padding 0 4px 4px
        position: absolute;
        bottom: -20px;
        left: 30px;
        &:hover
            background-color #eee
</style>