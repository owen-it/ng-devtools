<template>
    <div class="events-history-pane">
        <scroll-pane>
            <scroll-header>
                <action-header>
                    <div class="search">
                        <i class="search-icon material-icons">search</i>
                        <input placeholder="Filter events" ng-model="$ctrl.filter" type="text">
                    </div>    
                    <a class="button reset" ng-class="{ disabled: !$ctrl.events.length }" ng-click="$ctrl.reset()" title="Clear log">
                        <i class="material-icons small">do_not_disturb</i>
                        <span>Clear</span>
                    </a>
                    <a class="button toggle-recording" ng-click="$ctrl.toggleRecording()" title="{{ $ctrl.enabled ? 'Stop Recording' : 'Start Recording' }}">
                        <i class="material-icons small" ng-class="{ enabled: $ctrl.enabled }">lens</i>
                        <span>{{ $ctrl.enabled ? 'Recording' : 'Paused' }}</span>
                    </a>
                </action-header>
            </scroll-header>
            <scroll-content>
                <div class"history">
                    <div ng-if="$ctrl.filteredEvents.length === 0" class="no-events">
                        No events found <span ng-if="!$ctrl.enabled"><br>(Recording is paused)</span>
                    </div>
                    <div ng-if="$ctrl.filteredEvents.length > 0" class="entry">
                        {{ $ctrl.filteredEvents | json }}
                    </div>
                </div>            
            </scroll-content>
        </scroll-pane>
    </div>
</template>

<script>
    import scrollPane from 'components/ScrollPane.ng'
    import actionHeader from 'components/ActionHeader.ng'

    export default {
        components: { scrollPane, actionHeader },
        controller: class EventsHistoryCtrl 
        {
            constructor($scope, store, flux)
            {
                this.enabled = true
                this.filteredEvents = []
                this.$scope = $scope
                this.store = store
                this.flux = flux
                this.$inject = ['$scope', 'store']
            }

            $onInit () 
            {
                this.filter = ''

                this.$scope.$listenTo(this.store, ['events', 'enabled'], () => {
                    this.enabled = this.store.events.enabled
                })
            }

            toggleRecording ()
            {
                this.flux.dispatch('events/TOGGLE')
            }
        }
    }
</script>

<style lang="stylus" scoped>
    @import '../../common'

    .events-history-pane 
        display flex
        flex-direction column
        height 100%
        width 100%

    .no-events
        color: #ccc
</style>